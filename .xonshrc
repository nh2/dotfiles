import os
import re
import subprocess
from prompt_toolkit.keys import Keys
from xonsh.history.main import history_main


$PATH.append('$HOME/bin')
$PATH.append('$HOME/.fzf/bin')

$EDITOR = 'sublime_text_3 -w'

aliases['d'] = 'ls -lah'
aliases['e'] = 'sublime_text_3'
aliases['g'] = 'git'

aliases['aup'] = 'sudo apt-get update'
aliases['adist'] = 'sudo apt-get dist-upgrade'
aliases['aupdist'] = 'sudo apt-get update' && 'sudo apt-get dist-upgrade'
aliases['ainst'] = 'sudo apt-get install'


def get_fzf_binary_name():
    if 'TMUX' in ${...}:
        return 'fzf-tmux'
    return 'fzf'

def get_fzf_binary_path():
    path = $(which @(get_fzf_binary_name()))
    if not path:
        raise Exception("Could not determine path of fzf using `which`; maybe it is not installed or not on PATH?")
    return path


def fzf_insert_history(event):
    # Run fzf, feeding it the xonsh history
    # fzf prints the user's choice on stdout.

    # universal_newlines=True is used because `history_main` writes str()s
    # That also means that we don't have to `decode()` the stdout.read()` below.
    proc = subprocess.Popen([get_fzf_binary_path(), '--tac', '--no-sort', '--tiebreak=index', '+m'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, universal_newlines=True)
    history_main(args=['show', 'all'], stdout=proc.stdin)
    proc.stdin.close()
    proc.wait()
    choice = proc.stdout.read().strip()

    # Redraw the shell because fzf used alternate mode
    event.cli.renderer.erase()

    if choice:
        event.current_buffer.insert_text(choice)

def fzf_prompt_from_string(string):
    choice = subprocess.run([get_fzf_binary_path(), '--tiebreak=index', '+m'], input=string, stdout=subprocess.PIPE, universal_newlines=True).stdout.strip()
    return choice

@events.on_ptk_create
def custom_keybindings(bindings, **kw):

    # Key bindings for jumping over whole words (everything that's not
    # white space) using Ctrl+Left and Ctrl+Right;
    # Alt+Left and Alt+Right still jump over smaller word segmetns.
    # See https://github.com/xonsh/xonsh/issues/2403

    handler = bindings.registry.add_binding

    @handler(Keys.ControlLeft)
    def ctrl_left(event):
        buff = event.current_buffer
        pos = buff.document.find_previous_word_beginning(count=event.arg, WORD=True)
        if pos:
            buff.cursor_position += pos

    @handler(Keys.ControlRight)
    def ctrl_right(event):
        buff = event.current_buffer
        pos = buff.document.find_next_word_ending(count=event.arg, WORD=True)
        if pos:
            buff.cursor_position += pos


    # fzf key bindings

    @handler(Keys.ControlR)
    def fzf_history(event):
        fzf_insert_history(event)

    @handler(Keys.ControlS)
    def fzf_ssh(event):
        items = re.sub(r'(?i)host ', '', $(cat ~/.ssh/config /etc/ssh/ssh_config | grep -i '^host'))
        choice = fzf_prompt_from_string(items)

        # Redraw the shell because fzf used alternate mode
        event.cli.renderer.erase()

        event.current_buffer.insert_text('ssh ' + choice)
